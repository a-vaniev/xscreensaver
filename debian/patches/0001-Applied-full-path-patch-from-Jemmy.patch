From 7c5d70f24181613ee9ebfd07184a657d153ff910 Mon Sep 17 00:00:00 2001
From: Marcin Owsiany <marcin@owsiany.pl>
Date: Thu, 23 Jun 2011 20:10:47 +0100
Subject: [PATCH 1/6] Applied full path patch from Jemmy.

---
 OSX/osxgrabscreen.m                  |    5 ++
 driver/xscreensaver-getimage-desktop |   30 +++++++-------
 driver/xscreensaver-getimage-file    |   77 +++++++++++++++++----------------
 driver/xscreensaver-getimage-video   |   19 ++++----
 driver/xscreensaver-getimage.c       |   52 ++++++++++++++++++++---
 hacks/Makefile.in                    |    6 +-
 hacks/glx/carousel.c                 |    4 ++
 hacks/glx/glslideshow.c              |    8 +++-
 hacks/glx/photopile.c                |   12 +++++-
 hacks/webcollage                     |    1 +
 hacks/xanalogtv.c                    |    2 +-
 utils/grabclient.c                   |   19 +++++++-
 utils/grabscreen.c                   |   33 +++++++++++++-
 13 files changed, 188 insertions(+), 80 deletions(-)

diff --git a/OSX/osxgrabscreen.m b/OSX/osxgrabscreen.m
index f42ad34..14ea865 100644
--- a/OSX/osxgrabscreen.m
+++ b/OSX/osxgrabscreen.m
@@ -10,6 +10,11 @@
  */
 
 /* This is the OSX implementation of desktop-grabbing and image-loading.
+   This code is invoked by "utils/grabclient.c", which is linked directly
+   in to each screen saver bundle.
+
+   X11-based builds of the savers do not use this code (even on MacOS).
+   This is used only by the Cocoa build of the savers.
  */
 
 #import <stdlib.h>
diff --git a/driver/xscreensaver-getimage-desktop b/driver/xscreensaver-getimage-desktop
index 627cd25..574481d 100755
--- a/driver/xscreensaver-getimage-desktop
+++ b/driver/xscreensaver-getimage-desktop
@@ -1,5 +1,5 @@
 #!/usr/bin/perl -w
-# Copyright © 2003, 2005 Jamie Zawinski <jwz@jwz.org>.
+# Copyright © 2003-2005 Jamie Zawinski <jwz@jwz.org>.
 #
 # Permission to use, copy, modify, distribute, and sell this software and its
 # documentation for any purpose is hereby granted without fee, provided that
@@ -9,26 +9,26 @@
 # software for any purpose.  It is provided "as is" without express or 
 # implied warranty.
 #
-# This program attempts to grab an image of the desktop, and then load
-# it on to the root window using the "xscreensaver-getimage-file"
-# program.  Various frame-grabbing programs are known, and the first
-# one found is used.
 #
-# NOTE:  This script is only used on MacOS X / XDarwin systems, because
-#        on those systems, it's necessary to use the "screencapture"
-#        program to get an image of the desktop -- the usual X11
-#        mechanism for grabbing the screen doesn't work on OSX.
+# This script is invoked by "xscreensaver-getimage" on X11 MacOS systems
+# to grab an image of the desktop, and then load it on to the given X11
+# Drawable using the "xscreensaver-getimage-file" program.
 #
-# The various xscreensaver hacks that manipulate images ("slidescreen",
-# "jigsaw", etc.) get the image to manipulate by running the
-# "xscreensaver-getimage" program.
+# This script is only used in an *X11* build on MacOS systems.
 #
-# "xscreensaver-getimage" will invoke this program, depending on the
-# value of the "grabDesktopImages" setting in the ~/.xscreensaver file
-# (or in /usr/lib/X11/app-defaults/XScreenSaver).
+# When running on non-Mac X11 systems, utils/grabscreen.c is used.
+#
+# However, when running under X11 on MacOS, that usual X11-based
+# screen-grabbing mechanism doesn't work, so we need to invoke the
+# "/usr/bin/screencapture" program to do it instead.  (This script).
+#
+# However again, for the MacOS-native (Cocoa) build of the screen savers,
+# "utils/grabclient.c" instead links against "OSX/osxgrabscreen.m", which
+# grabs screen images directly without invoking a sub-process to do it.
 #
 # Created: 20-Oct-2003.
 
+
 require 5;
 #use diagnostics;	# Fails on some MacOS 10.5 systems
 use strict;
diff --git a/driver/xscreensaver-getimage-file b/driver/xscreensaver-getimage-file
index 6dd262e..19da66c 100755
--- a/driver/xscreensaver-getimage-file
+++ b/driver/xscreensaver-getimage-file
@@ -1,5 +1,5 @@
 #!/usr/bin/perl -w
-# Copyright © 2001-2009 Jamie Zawinski <jwz@jwz.org>.
+# Copyright © 2001-2011 Jamie Zawinski <jwz@jwz.org>.
 #
 # Permission to use, copy, modify, distribute, and sell this software and its
 # documentation for any purpose is hereby granted without fee, provided that
@@ -19,6 +19,8 @@
 # Under X11, the "xscreensaver-getimage" program invokes this script,
 # depending on the value of the "chooseRandomImages" and "imageDirectory"
 # settings in the ~/.xscreensaver file (or .../app-defaults/XScreenSaver).
+# The screen savers invoke "xscreensaver-getimage" via utils/grabclient.c,
+# which then invokes this script.
 #
 # Under Cocoa, this script lives inside the .saver bundle, and is invoked
 # directly from utils/grabclient.c.
@@ -104,18 +106,19 @@ my $stat_count = 0;	    # number of files/dirs stat'ed
 my $skip_count_unstat = 0;  # number of files skipped without stat'ing
 my $skip_count_stat = 0;    # number of files skipped after stat
 
-sub find_all_files {
+sub find_all_files($);
+sub find_all_files($) {
   my ($dir) = @_;
 
   print STDERR "$progname:  + reading dir $dir/...\n" if ($verbose > 1);
 
-  local *DIR;
-  if (! opendir (DIR, $dir)) {
+  my $dd;
+  if (! opendir ($dd, $dir)) {
     print STDERR "$progname: couldn't open $dir: $!\n" if ($verbose);
     return;
   }
-  my @files = readdir (DIR);
-  closedir (DIR);
+  my @files = readdir ($dd);
+  closedir ($dd);
 
   my @dirs = ();
 
@@ -190,7 +193,7 @@ sub find_all_files {
 }
 
 
-sub spotlight_all_files {
+sub spotlight_all_files($) {
   my ($dir) = @_;
 
   my @terms = ();
@@ -220,7 +223,7 @@ sub spotlight_all_files {
 # running at once, one will wait for the other, instead of both of
 # them spanking the same file system at the same time.
 #
-local *CACHE_FILE;
+my $cache_fd = undef;
 my $cache_file_name = undef;
 my $read_cache_p = 0;
 
@@ -242,18 +245,18 @@ sub read_cache($) {
     if ($verbose > 1);
 
   my $file = $cache_file_name;
-  open (CACHE_FILE, "+>>$file") || error ("unable to write $file: $!");
-  flock (CACHE_FILE, LOCK_EX)   || error ("unable to lock $file: $!");
-  seek (CACHE_FILE, 0, 0)       || error ("unable to rewind $file: $!");
+  open ($cache_fd, '+>>', $file) || error ("unable to write $file: $!");
+  flock ($cache_fd, LOCK_EX)     || error ("unable to lock $file: $!");
+  seek ($cache_fd, 0, 0)         || error ("unable to rewind $file: $!");
 
-  my $mtime = (stat(CACHE_FILE))[9];
+  my $mtime = (stat($cache_fd))[9];
 
   if ($mtime + $cache_max_age < time) {
     print STDERR "$progname: cache is too old\n" if ($verbose);
     return ();
   }
 
-  my $odir = <CACHE_FILE>;
+  my $odir = <$cache_fd>;
   $odir =~ s/[\r\n]+$//s if defined ($odir);
   if (!defined ($odir) || ($dir ne $odir)) {
     print STDERR "$progname: cache is for $odir, not $dir\n"
@@ -262,7 +265,7 @@ sub read_cache($) {
   }
 
   my @files = ();
-  while (<CACHE_FILE>) { 
+  while (<$cache_fd>) { 
     s/[\r\n]+$//s;
     push @files, "$odir/$_";
   }
@@ -285,18 +288,17 @@ sub write_cache($) {
 
   if (! $read_cache_p) {
 
-    truncate (CACHE_FILE, 0) ||
+    truncate ($cache_fd, 0) ||
       error ("unable to truncate $cache_file_name: $!");
-    seek (CACHE_FILE, 0, 0) ||
+    seek ($cache_fd, 0, 0) ||
       error ("unable to rewind $cache_file_name: $!");
 
     if ($#all_files >= 0) {
-      print CACHE_FILE "$dir\n";
-      my $re = qr/$dir/;
+      print $cache_fd "$dir\n";
       foreach (@all_files) {
         my $f = $_; # stupid Perl. do this to avoid modifying @all_files!
-        $f =~ s@^$re/@@so || die;
-        print CACHE_FILE "$f\n";
+        $f =~ s@^\Q$dir\L/@@so || die;  # remove $dir from front
+        print $cache_fd "$f\n";
       }
     }
 
@@ -304,17 +306,16 @@ sub write_cache($) {
       if ($verbose);
   }
 
-  flock (CACHE_FILE, LOCK_UN) ||
+  flock ($cache_fd, LOCK_UN) ||
     error ("unable to unlock $cache_file_name: $!");
-  close (CACHE_FILE);
+  close ($cache_fd);
+  $cache_fd = undef;
 }
 
 
 sub find_random_file($) {
   my ($dir) = @_;
 
-  $dir =~ s@/+$@@g;
-
   if ($use_spotlight_p == -1) {
     $use_spotlight_p = 0;
     if (-x '/usr/bin/mdfind') {
@@ -362,6 +363,7 @@ sub find_random_file($) {
     my $n = int (rand ($#all_files + 1));
     my $file = $all_files[$n];
     if (large_enough_p ($file)) {
+      $file =~ s@^\Q$dir\L/@@so || die;  # remove $dir from front
       return $file;
     }
   }
@@ -372,7 +374,7 @@ sub find_random_file($) {
 }
 
 
-sub large_enough_p {
+sub large_enough_p($) {
   my ($file) = @_;
 
   my ($w, $h) = image_file_size ($file);
@@ -399,7 +401,7 @@ sub large_enough_p {
 
 # Given the raw body of a GIF document, returns the dimensions of the image.
 #
-sub gif_size {
+sub gif_size($) {
   my ($body) = @_;
   my $type = substr($body, 0, 6);
   my $s;
@@ -411,7 +413,7 @@ sub gif_size {
 
 # Given the raw body of a JPEG document, returns the dimensions of the image.
 #
-sub jpeg_size {
+sub jpeg_size($) {
   my ($body) = @_;
   my $i = 0;
   my $L = length($body);
@@ -462,7 +464,7 @@ sub jpeg_size {
 
 # Given the raw body of a PNG document, returns the dimensions of the image.
 #
-sub png_size {
+sub png_size($) {
   my ($body) = @_;
   return () unless ($body =~ m/^\211PNG\r/s);
   my ($bits) = ($body =~ m/^.{12}(.{12})/s);
@@ -476,7 +478,7 @@ sub png_size {
 # Given the raw body of a GIF, JPEG, or PNG document, returns the dimensions
 # of the image.
 #
-sub image_size {
+sub image_size($) {
   my ($body) = @_;
   return () if (length($body) < 10);
   my ($w, $h) = gif_size ($body);
@@ -489,17 +491,17 @@ sub image_size {
 
 # Returns the dimensions of the image file.
 #
-sub image_file_size {
+sub image_file_size($) {
   my ($file) = @_;
-  local *IN;
-  if (! open (IN, "<$file")) {
+  my $in;
+  if (! open ($in, '<', $file)) {
     print STDERR "$progname: $file: $!\n" if ($verbose);
     return undef;
   }
-  binmode (IN);  # Larry can take Unicode and shove it up his ass sideways.
+  binmode ($in);  # Larry can take Unicode and shove it up his ass sideways.
   my $body = '';
-  sysread (IN, $body, 1024 * 50);   # The first 50k should be enough.
-  close IN;			    # (It's not for certain huge jpegs...
+  sysread ($in, $body, 1024 * 50);  # The first 50k should be enough.
+  close $in;			    # (It's not for certain huge jpegs...
   return image_size ($body);	    # but we know they're huge!)
 }
 
@@ -510,7 +512,7 @@ sub error($) {
   exit 1;
 }
 
-sub usage {
+sub usage() {
   print STDERR "usage: $progname [--verbose] directory\n" .
   "       Prints the name of a randomly-selected image file.  The directory\n" .
   "       is searched recursively.  Images smaller than " .
@@ -518,7 +520,7 @@ sub usage {
   exit 1;
 }
 
-sub main {
+sub main() {
   my $dir = undef;
 
   while ($_ = $ARGV[0]) {
@@ -538,6 +540,7 @@ sub main {
   usage unless (defined($dir));
 
   $dir =~ s@^~/@$ENV{HOME}/@s;     # allow literal "~/"
+  $dir =~ s@/+$@@s;		   # omit trailing /
 
   if (! -d $dir) {
     print STDERR "$progname: $dir: not a directory\n";
diff --git a/driver/xscreensaver-getimage-video b/driver/xscreensaver-getimage-video
index 1d79d99..cd65a87 100755
--- a/driver/xscreensaver-getimage-video
+++ b/driver/xscreensaver-getimage-video
@@ -1,5 +1,5 @@
 #!/usr/bin/perl -w
-# Copyright © 2001-2010 Jamie Zawinski <jwz@jwz.org>.
+# Copyright © 2001-2011 Jamie Zawinski <jwz@jwz.org>.
 #
 # Permission to use, copy, modify, distribute, and sell this software and its
 # documentation for any purpose is hereby granted without fee, provided that
@@ -18,9 +18,10 @@
 # "jigsaw", etc.) get the image to manipulate by running the
 # "xscreensaver-getimage" program.
 #
-# "xscreensaver-getimage" will invoke this program, depending on the
-# value of the "grabVideoFrames" setting in the ~/.xscreensaver file
-# (or in /usr/lib/X11/app-defaults/XScreenSaver).
+# The various screen savers invoke "xscreensaver-getimage", which will in
+# turn invoke this program, depending on the value of the "grabVideoFrames"
+# setting in the ~/.xscreensaver file (or in the app-defaults file, usually
+# /usr/lib/X11/app-defaults/XScreenSaver).
 #
 # Created: 13-Apr-2001.
 
@@ -122,21 +123,21 @@ sub grab_image() {
     print STDOUT "$tmpfile\n";
 
   } elsif ($use_stdout_p) {
-    local *IN;
     my $ppm = "";
     my $reader  = "<$tmpfile";
 
     # horrid kludge for SGIs, since they don't use PPM...
     if ($cmd =~ m/^vidtomem\s/) {
-      $reader = "sgitopnm $tmpfile";
+      $reader  = "sgitopnm $tmpfile";
       $reader .= " 2>/dev/null" if ($verbose <= 1);
       $reader .= " |";
     }
 
-    open(IN, $reader) || error ("reading $tmpfile: $!");
+    open (my $in, $reader) || error ("reading $tmpfile: $!");
     print STDERR "$progname: reading $tmpfile\n" if ($verbose > 1);
-    while (<IN>) { $ppm .= $_; }
-    close IN;
+    local $/ = undef;  # read entire file
+    $ppm = <$in>;
+    close $in;
     unlink $tmpfile;
     print STDOUT $ppm;
 
diff --git a/driver/xscreensaver-getimage.c b/driver/xscreensaver-getimage.c
index 856e05a..d7c1508 100644
--- a/driver/xscreensaver-getimage.c
+++ b/driver/xscreensaver-getimage.c
@@ -66,8 +66,11 @@
 
 
 #ifdef __APPLE__
-  /* On MacOSX / XDarwin, the usual X11 mechanism of getting a screen shot
-     doesn't work, and we need to use an external program. */
+  /* On MacOS under X11, the usual X11 mechanism of getting a screen shot
+     doesn't work, and we need to use an external program.  This is only
+     used when running under X11 on MacOS.  If it's a Cocoa build, this
+     path is not taken, and OSX/osxgrabscreen.m is used instead.
+   */
 # define USE_EXTERNAL_SCREEN_GRABBER
 #endif
 
@@ -494,6 +497,8 @@ read_file_gdk (Screen *screen, Window window, Drawable drawable,
 
 /* Allocates a colormap that makes a PseudoColor or DirectColor
    visual behave like a TrueColor visual of the same depth.
+
+   #### Duplicated in utils/grabscreen.c
  */
 static void
 allocate_cubic_colormap (Screen *screen, Visual *visual, Colormap cmap,
@@ -560,6 +565,8 @@ allocate_cubic_colormap (Screen *screen, Visual *visual, Colormap cmap,
 
 /* Find the pixel index that is closest to the given color
    (using linear distance in RGB space -- which is far from the best way.)
+
+   #### Duplicated in utils/grabscreen.c
  */
 static unsigned long
 find_closest_pixel (XColor *colors, int ncolors,
@@ -600,6 +607,8 @@ find_closest_pixel (XColor *colors, int ncolors,
    displayable with the given X colormap.  The farther from a perfect
    color cube the contents of the colormap are, the lossier the 
    transformation will be.  No dithering is done.
+
+   #### Duplicated in utils/grabscreen.c
  */
 static void
 remap_image (Screen *screen, Colormap cmap, XImage *image, Bool verbose_p)
@@ -1119,7 +1128,7 @@ display_file (Screen *screen, Window window, Drawable drawable,
 
 /* Invokes a sub-process and returns its output (presumably, a file to
    load.)  Free the string when done.  'grab_type' controls which program
-   to run.
+   to run.  Returned pathname may be relative to 'directory', or absolute.
  */
 static char *
 get_filename_1 (Screen *screen, const char *directory, grab_type type,
@@ -1129,7 +1138,7 @@ get_filename_1 (Screen *screen, const char *directory, grab_type type,
   pid_t forked;
   int fds [2];
   int in, out;
-  char buf[1024];
+  char buf[10240];
   char *av[20];
   int ac = 0;
 
@@ -1214,6 +1223,7 @@ get_filename_1 (Screen *screen, const char *directory, grab_type type,
         int wait_status = 0;
         FILE *f = fdopen (in, "r");
         int L;
+        char *ret = 0;
 
         close (out);  /* don't need this one */
         *buf = 0;
@@ -1230,14 +1240,28 @@ get_filename_1 (Screen *screen, const char *directory, grab_type type,
           
         if (!*buf)
           return 0;
+
+        ret = strdup (buf);
+
+        if (*ret != '/')
+          {
+            /* Program returned path relative to directory.  Prepend dir
+               to buf so that we can properly stat it. */
+            strcpy (buf, directory);
+            if (directory[strlen(directory)-1] != '/')
+              strcat (buf, "/");
+            strcat (buf, ret);
+          }
+
         if (stat(buf, &st))
           {
             fprintf (stderr, "%s: file does not exist: \"%s\"\n",
                      progname, buf);
+            free (ret);
             return 0;
           }
         else
-          return strdup (buf);
+          return ret;
       }
     }
 
@@ -1487,6 +1511,7 @@ get_image (Screen *screen,
   grab_type which = GRAB_BARS;
   struct stat st;
   const char *file_prop = 0;
+  char *absfile = 0;
   XRectangle geom = { 0, 0, 0, 0 };
 
   if (! drawable_window_p (dpy, window))
@@ -1572,7 +1597,8 @@ get_image (Screen *screen,
      We cannot grab desktop images that way if:
        - the window is a non-top-level window.
 
-     Using the MacOS X way, desktops are just like loaded image files.
+     Under X11 on MacOS, desktops are just like loaded image files.
+     Under Cocoa on MacOS, this code is not used at all.
    */
 # ifndef USE_EXTERNAL_SCREEN_GRABBER
   if (desk_p)
@@ -1650,7 +1676,18 @@ get_image (Screen *screen,
       break;
 
     case GRAB_FILE:
-      if (! display_file (screen, window, drawable, file, verbose_p, &geom))
+      if (*file && *file != '/')	/* pathname is relative to dir. */
+        {
+          if (absfile) free (absfile);
+          absfile = malloc (strlen(dir) + strlen(file) + 10);
+          strcpy (absfile, dir);
+          if (dir[strlen(dir)-1] != '/')
+            strcat (absfile, "/");
+          strcat (absfile, file);
+        }
+      if (! display_file (screen, window, drawable, 
+                          (absfile ? absfile : file),
+                          verbose_p, &geom))
         goto COLORBARS;
       file_prop = file;
       break;
@@ -1686,6 +1723,7 @@ get_image (Screen *screen,
       XDeleteProperty (dpy, window, a);
   }
 
+  if (absfile) free (absfile);
   XSync (dpy, False);
 }
 
diff --git a/hacks/Makefile.in b/hacks/Makefile.in
index 3b5a1b5..3b38fb8 100644
--- a/hacks/Makefile.in
+++ b/hacks/Makefile.in
@@ -1,4 +1,4 @@
-# hacks/Makefile.in --- xscreensaver, Copyright (c) 1997-2010 Jamie Zawinski.
+# hacks/Makefile.in --- xscreensaver, Copyright (c) 1997-2011 Jamie Zawinski.
 # the `../configure' script generates `hacks/Makefile' from this file.
 
 @SET_MAKE@
@@ -66,7 +66,7 @@ INCLUDES_1	= -I. -I$(srcdir) -I$(UTILS_SRC) -I..
 INCLUDES	= $(INCLUDES_1) @INCLUDES@
 
 UTIL_SRCS	= $(UTILS_SRC)/alpha.c $(UTILS_SRC)/colors.c \
-		  $(UTILS_SRC)/grabscreen.c $(UTILS_SRC)/grabclient.c \
+		  $(UTILS_SRC)/grabclient.c \
 		  $(UTILS_SRC)/hsv.c $(UTILS_SRC)/resources.c \
 		  $(UTILS_SRC)/spline.c $(UTILS_SRC)/usleep.c \
 		  $(UTILS_SRC)/visual.c $(UTILS_SRC)/logo.c \
@@ -74,7 +74,7 @@ UTIL_SRCS	= $(UTILS_SRC)/alpha.c $(UTILS_SRC)/colors.c \
 		  $(UTILS_SRC)/yarandom.c $(UTILS_SRC)/erase.c \
 		  $(UTILS_SRC)/xshm.c $(UTILS_SRC)/xdbe.c
 UTIL_OBJS	= $(UTILS_BIN)/alpha.o $(UTILS_BIN)/colors.o \
-		  $(UTILS_BIN)/grabscreen.o $(UTILS_BIN)/grabclient.o \
+		  $(UTILS_BIN)/grabclient.o \
 		  $(UTILS_BIN)/hsv.o $(UTILS_BIN)/resources.o \
 		  $(UTILS_BIN)/spline.o $(UTILS_BIN)/usleep.o \
 		  $(UTILS_BIN)/visual.o $(UTILS_BIN)/logo.o \
diff --git a/hacks/glx/carousel.c b/hacks/glx/carousel.c
index 0c29253..513fbc8 100644
--- a/hacks/glx/carousel.c
+++ b/hacks/glx/carousel.c
@@ -285,11 +285,15 @@ image_loaded_cb (const char *filename, XRectangle *geom,
     free (frame->loading.title);
   frame->loading.title = (filename ? strdup (filename) : 0);
 
+# if 0 /* xscreensaver-getimage returns paths relative to the image directory
+          now, so leave the sub-directory part in.
+        */
   if (frame->loading.title)   /* strip filename to part after last /. */
     {
       char *s = strrchr (frame->loading.title, '/');
       if (s) strcpy (frame->loading.title, s+1);
     }
+# endif /* 0 */
 
   if (debug_p)
     fprintf (stderr, "%s:   loaded %4d x %-4d  %4d x %-4d  \"%s\"\n",
diff --git a/hacks/glx/glslideshow.c b/hacks/glx/glslideshow.c
index 0cdf14d..e8e5eb3 100644
--- a/hacks/glx/glslideshow.c
+++ b/hacks/glx/glslideshow.c
@@ -1,4 +1,4 @@
-/* glslideshow, Copyright (c) 2003-2008 Jamie Zawinski <jwz@jwz.org>
+/* glslideshow, Copyright (c) 2003-2011 Jamie Zawinski <jwz@jwz.org>
  * Loads a sequence of images and smoothly pans around them; crossfades
  * when loading new images.
  *
@@ -358,11 +358,15 @@ image_loaded_cb (const char *filename, XRectangle *geom,
       img->geom.height *= scale;
     }
 
-  if (img->title)   /* strip filename to part after last /. */
+# if 0 /* xscreensaver-getimage returns paths relative to the image directory
+          now, so leave the sub-directory part in.
+        */
+  if (img->title)  /* strip filename to part between last "/" and last ".". */
     {
       char *s = strrchr (img->title, '/');
       if (s) strcpy (img->title, s+1);
     }
+# endif /* 0 */
 
   if (debug_p)
     fprintf (stderr, "%s: loaded   img %2d: \"%s\"\n",
diff --git a/hacks/glx/photopile.c b/hacks/glx/photopile.c
index 53fc7c7..57c57df 100644
--- a/hacks/glx/photopile.c
+++ b/hacks/glx/photopile.c
@@ -278,11 +278,15 @@ image_loaded_cb (const char *filename, XRectangle *geom,
     free (frame->title);
   frame->title = (filename ? strdup (filename) : 0);
 
+# if 0 /* xscreensaver-getimage returns paths relative to the image directory
+          now, so leave the sub-directory part in.
+        */
   if (frame->title)   /* strip filename to part after last /. */
     {
       char *s = strrchr (frame->title, '/');
       if (s) strcpy (frame->title, s+1);
     }
+# endif /* 0 */
 
   if (debug_p)
     fprintf (stderr, "%s:   loaded %4d x %-4d  %4d x %-4d  \"%s\"\n",
@@ -617,7 +621,13 @@ draw_image (ModeInfo *mi, int i, GLfloat t, GLfloat s, GLfloat z)
     {
       int sw, sh;
       GLfloat scale = 0.6;
-      char *title = frame->title ? frame->title : "(untitled)";
+      const char *title = frame->title ? frame->title : "(untitled)";
+
+      /* #### Highly approximate, but doing real clipping is harder... */
+      int max = 35;
+      if (strlen(title) > max)
+        title += strlen(title) - max;
+
       sw = texture_string_width (ss->texfont, title, &sh);
 
       glTranslatef (-sw*scale*0.5, -h - sh*scale, z);
diff --git a/hacks/webcollage b/hacks/webcollage
index 0815327..cb926c1 100755
--- a/hacks/webcollage
+++ b/hacks/webcollage
@@ -2219,6 +2219,7 @@ sub pick_from_local_dir {
 
   my $v = ($verbose_exec ? "-v" : "");
   my $pick = `xscreensaver-getimage-file $v "$dir"`;
+  $pick = "$dir/$pick" unless ($pick =~ m@^/@s);       # relative path
 
   LOG ($verbose_load, "picked file $pick ($id)");
   return ($id, $pick);
diff --git a/hacks/xanalogtv.c b/hacks/xanalogtv.c
index 14f3bf2..38a08b3 100644
--- a/hacks/xanalogtv.c
+++ b/hacks/xanalogtv.c
@@ -60,7 +60,7 @@ typedef struct chansetting_s {
   analogtv_reception recs[MAX_MULTICHAN];
   double noise_level;
   Bool image_loaded_p;
-  char *filename;  /* mostly unused */
+/*  char *filename;     was only used for diagnostics */
   int dur;
 } chansetting;
 
diff --git a/utils/grabclient.c b/utils/grabclient.c
index 54396c7..09ed6f1 100644
--- a/utils/grabclient.c
+++ b/utils/grabclient.c
@@ -1,4 +1,4 @@
-/* xscreensaver, Copyright (c) 1992-2010 Jamie Zawinski <jwz@jwz.org>
+/* xscreensaver, Copyright (c) 1992-2011 Jamie Zawinski <jwz@jwz.org>
  *
  * Permission to use, copy, modify, distribute, and sell this software and its
  * documentation for any purpose is hereby granted without fee, provided that
@@ -545,6 +545,7 @@ struct pipe_closure {
   Screen *screen;
   Window xwindow;
   Drawable drawable;
+  char *directory;
   void (*callback) (Screen *, Window, Drawable,
                     const char *name, XRectangle *geom,
                     void *closure);
@@ -559,6 +560,8 @@ pipe_cb (XtPointer closure, int *source, XtInputId *id)
    */
   struct pipe_closure *clo2 = (struct pipe_closure *) closure;
   char buf[10240];
+  const char *dir = clo2->directory;
+  char *absfile = 0;
   fgets (buf, sizeof(buf)-1, clo2->pipe);
   pclose (clo2->pipe);
   clo2->pipe = 0;
@@ -573,8 +576,17 @@ pipe_cb (XtPointer closure, int *source, XtInputId *id)
   Display *dpy = DisplayOfScreen (clo2->screen);
   XRectangle geom;
 
+  if (*buf && *buf != '/')		/* pathname is relative to dir. */
+    {
+      absfile = malloc (strlen(dir) + strlen(buf) + 10);
+      strcpy (absfile, dir);
+      if (dir[strlen(dir)-1] != '/')
+        strcat (absfile, "/");
+      strcat (absfile, buf);
+    }
+
   if (! osx_load_image_file (clo2->screen, clo2->xwindow, clo2->drawable,
-                             buf, &geom)) {
+                             (absfile ? absfile : buf), &geom)) {
     /* unable to load image - draw colorbars 
      */
     XWindowAttributes xgwa;
@@ -605,9 +617,11 @@ pipe_cb (XtPointer closure, int *source, XtInputId *id)
     geom.height = h;
   }
 
+  if (absfile) free (absfile);
   clo2->callback (clo2->screen, clo2->xwindow, clo2->drawable, buf, &geom,
                   clo2->closure);
   clo2->callback = 0;
+  free (clo2->directory);
   free (clo2);
 }
 
@@ -645,6 +659,7 @@ osx_load_image_file_async (Screen *screen, Window xwindow, Drawable drawable,
 
   Display *dpy = DisplayOfScreen (screen);
   struct pipe_closure *clo2 = (struct pipe_closure *) calloc (1, sizeof(*clo2));
+  clo2->directory = strdup (dir);
   clo2->pipe = open_image_name_pipe (dir);
   clo2->id = XtAppAddInput (XtDisplayToApplicationContext (dpy), 
                             fileno (clo2->pipe),
diff --git a/utils/grabscreen.c b/utils/grabscreen.c
index 99b7cae..00a96de 100644
--- a/utils/grabscreen.c
+++ b/utils/grabscreen.c
@@ -1,5 +1,4 @@
-/* xscreensaver, Copyright (c) 1992, 1993, 1994, 1997, 1998, 2003, 2004, 2006
- *  Jamie Zawinski <jwz@jwz.org>
+/* xscreensaver, Copyright (c) 1992-2006 Jamie Zawinski <jwz@jwz.org>
  *
  * Permission to use, copy, modify, distribute, and sell this software and its
  * documentation for any purpose is hereby granted without fee, provided that
@@ -15,6 +14,20 @@
    the difference between drawing on the actual root window, and on the fake
    root window used by the screensaver, since at this level the illusion 
    breaks down...
+
+   The hacks themselves use utils/grabclient.c to invoke the
+   "xscreensaver-getimage" program as a sub-process.
+
+   This code is linked only into "driver/xscreensaver-getimage".  On normal
+   X11 systems, "xscreensaver-getimage.c" invokes the code in this file.
+
+   However, under X11 on MacOS, "xscreensaver-getimage" instead runs the
+   script "driver/xscreensaver-getimage-desktop", which invokes the MacOS-
+   specific program "/usr/sbin/screencapture" to get the desktop image.
+
+   However again, for the MacOS-native (Cocoa) build of the screen savers,
+   "utils/grabclient.c" instead links against "OSX/osxgrabscreen.m", which
+   grabs screen images directly without invoking a sub-process to do it.
  */
 
 #include "utils.h"
@@ -717,6 +730,8 @@ read_display (Screen *screen, Window window, Pixmap into_pixmap,
 
 /* Makes and installs a colormap that makes a PseudoColor or DirectColor
    visual behave like a TrueColor visual of the same depth.
+
+   #### Duplicated in driver/xscreensaver-getimage.c
  */
 static void
 allocate_cubic_colormap (Screen *screen, Window window, Visual *visual)
@@ -732,7 +747,7 @@ allocate_cubic_colormap (Screen *screen, Window window, Visual *visual)
 
   XGetWindowAttributes (dpy, window, &xgwa);
   cmap = xgwa.colormap;
-  depth = visual_depth(screen, visual);
+  depth = visual_depth (screen, visual);
 
   switch (depth)
     {
@@ -784,6 +799,11 @@ allocate_cubic_colormap (Screen *screen, Window window, Visual *visual)
   }
 }
 
+/* Find the pixel index that is closest to the given color
+   (using linear distance in RGB space -- which is far from the best way.)
+
+   #### Duplicated in driver/xscreensaver-getimage.c
+ */
 static unsigned long
 find_closest_pixel (XColor *colors, int ncolors,
                     unsigned long r, unsigned long g, unsigned long b)
@@ -819,6 +839,13 @@ find_closest_pixel (XColor *colors, int ncolors,
 }
 
 
+/* Given an XImage with 8-bit or 12-bit RGB data, convert it to be 
+   displayable with the given X colormap.  The farther from a perfect
+   color cube the contents of the colormap are, the lossier the 
+   transformation will be.  No dithering is done.
+
+   #### Duplicated in driver/xscreensaver-getimage.c
+ */
 void
 remap_image (Screen *screen, Window window, Colormap cmap, XImage *image)
 {
-- 
1.7.3.1

